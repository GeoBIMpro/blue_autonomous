# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mtig_driver/GpsInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class GpsInfo(genpy.Message):
  _md5sum = "585846f714e5b60f71d9245253f7336a"
  _type = "mtig_driver/GpsInfo"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

#GPS DOP
float64 geometricDOP
float64 positionDOP
float64 timeDOP
float64 verticalDOP
float64 horizontalDOP
float64 northingDOP
float64 eastingDOP
float64 itow


#Position Accuracy Estimate
float64 position_accuracy
float64 speed_accuracy

#Number of satellites
uint8 satellite_number

uint8 GPS_NO_FIX = 0
uint8 DEAD_RECKONING = 1
uint8 GPS_2D_FIX = 2
uint8 GPS_3D_FIX = 3
uint8 GPS_AND_DEAD_RECKONING = 4

uint8 gps_fix

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  # Pseudo-constants
  GPS_NO_FIX = 0
  DEAD_RECKONING = 1
  GPS_2D_FIX = 2
  GPS_3D_FIX = 3
  GPS_AND_DEAD_RECKONING = 4

  __slots__ = ['header','geometricDOP','positionDOP','timeDOP','verticalDOP','horizontalDOP','northingDOP','eastingDOP','itow','position_accuracy','speed_accuracy','satellite_number','gps_fix']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,geometricDOP,positionDOP,timeDOP,verticalDOP,horizontalDOP,northingDOP,eastingDOP,itow,position_accuracy,speed_accuracy,satellite_number,gps_fix

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GpsInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.geometricDOP is None:
        self.geometricDOP = 0.
      if self.positionDOP is None:
        self.positionDOP = 0.
      if self.timeDOP is None:
        self.timeDOP = 0.
      if self.verticalDOP is None:
        self.verticalDOP = 0.
      if self.horizontalDOP is None:
        self.horizontalDOP = 0.
      if self.northingDOP is None:
        self.northingDOP = 0.
      if self.eastingDOP is None:
        self.eastingDOP = 0.
      if self.itow is None:
        self.itow = 0.
      if self.position_accuracy is None:
        self.position_accuracy = 0.
      if self.speed_accuracy is None:
        self.speed_accuracy = 0.
      if self.satellite_number is None:
        self.satellite_number = 0
      if self.gps_fix is None:
        self.gps_fix = 0
    else:
      self.header = std_msgs.msg.Header()
      self.geometricDOP = 0.
      self.positionDOP = 0.
      self.timeDOP = 0.
      self.verticalDOP = 0.
      self.horizontalDOP = 0.
      self.northingDOP = 0.
      self.eastingDOP = 0.
      self.itow = 0.
      self.position_accuracy = 0.
      self.speed_accuracy = 0.
      self.satellite_number = 0
      self.gps_fix = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d2B().pack(_x.geometricDOP, _x.positionDOP, _x.timeDOP, _x.verticalDOP, _x.horizontalDOP, _x.northingDOP, _x.eastingDOP, _x.itow, _x.position_accuracy, _x.speed_accuracy, _x.satellite_number, _x.gps_fix))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.geometricDOP, _x.positionDOP, _x.timeDOP, _x.verticalDOP, _x.horizontalDOP, _x.northingDOP, _x.eastingDOP, _x.itow, _x.position_accuracy, _x.speed_accuracy, _x.satellite_number, _x.gps_fix,) = _get_struct_10d2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_10d2B().pack(_x.geometricDOP, _x.positionDOP, _x.timeDOP, _x.verticalDOP, _x.horizontalDOP, _x.northingDOP, _x.eastingDOP, _x.itow, _x.position_accuracy, _x.speed_accuracy, _x.satellite_number, _x.gps_fix))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 82
      (_x.geometricDOP, _x.positionDOP, _x.timeDOP, _x.verticalDOP, _x.horizontalDOP, _x.northingDOP, _x.eastingDOP, _x.itow, _x.position_accuracy, _x.speed_accuracy, _x.satellite_number, _x.gps_fix,) = _get_struct_10d2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d2B = None
def _get_struct_10d2B():
    global _struct_10d2B
    if _struct_10d2B is None:
        _struct_10d2B = struct.Struct("<10d2B")
    return _struct_10d2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
