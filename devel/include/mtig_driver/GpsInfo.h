// Generated by gencpp from file mtig_driver/GpsInfo.msg
// DO NOT EDIT!


#ifndef MTIG_DRIVER_MESSAGE_GPSINFO_H
#define MTIG_DRIVER_MESSAGE_GPSINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mtig_driver
{
template <class ContainerAllocator>
struct GpsInfo_
{
  typedef GpsInfo_<ContainerAllocator> Type;

  GpsInfo_()
    : header()
    , geometricDOP(0.0)
    , positionDOP(0.0)
    , timeDOP(0.0)
    , verticalDOP(0.0)
    , horizontalDOP(0.0)
    , northingDOP(0.0)
    , eastingDOP(0.0)
    , itow(0.0)
    , position_accuracy(0.0)
    , speed_accuracy(0.0)
    , satellite_number(0)
    , gps_fix(0)  {
    }
  GpsInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , geometricDOP(0.0)
    , positionDOP(0.0)
    , timeDOP(0.0)
    , verticalDOP(0.0)
    , horizontalDOP(0.0)
    , northingDOP(0.0)
    , eastingDOP(0.0)
    , itow(0.0)
    , position_accuracy(0.0)
    , speed_accuracy(0.0)
    , satellite_number(0)
    , gps_fix(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _geometricDOP_type;
  _geometricDOP_type geometricDOP;

   typedef double _positionDOP_type;
  _positionDOP_type positionDOP;

   typedef double _timeDOP_type;
  _timeDOP_type timeDOP;

   typedef double _verticalDOP_type;
  _verticalDOP_type verticalDOP;

   typedef double _horizontalDOP_type;
  _horizontalDOP_type horizontalDOP;

   typedef double _northingDOP_type;
  _northingDOP_type northingDOP;

   typedef double _eastingDOP_type;
  _eastingDOP_type eastingDOP;

   typedef double _itow_type;
  _itow_type itow;

   typedef double _position_accuracy_type;
  _position_accuracy_type position_accuracy;

   typedef double _speed_accuracy_type;
  _speed_accuracy_type speed_accuracy;

   typedef uint8_t _satellite_number_type;
  _satellite_number_type satellite_number;

   typedef uint8_t _gps_fix_type;
  _gps_fix_type gps_fix;


    enum { GPS_NO_FIX = 0u };
     enum { DEAD_RECKONING = 1u };
     enum { GPS_2D_FIX = 2u };
     enum { GPS_3D_FIX = 3u };
     enum { GPS_AND_DEAD_RECKONING = 4u };
 

  typedef boost::shared_ptr< ::mtig_driver::GpsInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mtig_driver::GpsInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GpsInfo_

typedef ::mtig_driver::GpsInfo_<std::allocator<void> > GpsInfo;

typedef boost::shared_ptr< ::mtig_driver::GpsInfo > GpsInfoPtr;
typedef boost::shared_ptr< ::mtig_driver::GpsInfo const> GpsInfoConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mtig_driver::GpsInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mtig_driver::GpsInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mtig_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'mtig_driver': ['/home/ajwahir/grmc/catkin_ws_blue/src/mtig_driver/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mtig_driver::GpsInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mtig_driver::GpsInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtig_driver::GpsInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mtig_driver::GpsInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtig_driver::GpsInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mtig_driver::GpsInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mtig_driver::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "585846f714e5b60f71d9245253f7336a";
  }

  static const char* value(const ::mtig_driver::GpsInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x585846f714e5b60fULL;
  static const uint64_t static_value2 = 0x71d9245253f7336aULL;
};

template<class ContainerAllocator>
struct DataType< ::mtig_driver::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mtig_driver/GpsInfo";
  }

  static const char* value(const ::mtig_driver::GpsInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mtig_driver::GpsInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
#GPS DOP\n\
float64 geometricDOP\n\
float64 positionDOP\n\
float64 timeDOP\n\
float64 verticalDOP\n\
float64 horizontalDOP\n\
float64 northingDOP\n\
float64 eastingDOP\n\
float64 itow\n\
\n\
\n\
#Position Accuracy Estimate\n\
float64 position_accuracy\n\
float64 speed_accuracy\n\
\n\
#Number of satellites\n\
uint8 satellite_number\n\
\n\
uint8 GPS_NO_FIX = 0\n\
uint8 DEAD_RECKONING = 1\n\
uint8 GPS_2D_FIX = 2\n\
uint8 GPS_3D_FIX = 3\n\
uint8 GPS_AND_DEAD_RECKONING = 4\n\
\n\
uint8 gps_fix\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::mtig_driver::GpsInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mtig_driver::GpsInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.geometricDOP);
      stream.next(m.positionDOP);
      stream.next(m.timeDOP);
      stream.next(m.verticalDOP);
      stream.next(m.horizontalDOP);
      stream.next(m.northingDOP);
      stream.next(m.eastingDOP);
      stream.next(m.itow);
      stream.next(m.position_accuracy);
      stream.next(m.speed_accuracy);
      stream.next(m.satellite_number);
      stream.next(m.gps_fix);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GpsInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mtig_driver::GpsInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mtig_driver::GpsInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "geometricDOP: ";
    Printer<double>::stream(s, indent + "  ", v.geometricDOP);
    s << indent << "positionDOP: ";
    Printer<double>::stream(s, indent + "  ", v.positionDOP);
    s << indent << "timeDOP: ";
    Printer<double>::stream(s, indent + "  ", v.timeDOP);
    s << indent << "verticalDOP: ";
    Printer<double>::stream(s, indent + "  ", v.verticalDOP);
    s << indent << "horizontalDOP: ";
    Printer<double>::stream(s, indent + "  ", v.horizontalDOP);
    s << indent << "northingDOP: ";
    Printer<double>::stream(s, indent + "  ", v.northingDOP);
    s << indent << "eastingDOP: ";
    Printer<double>::stream(s, indent + "  ", v.eastingDOP);
    s << indent << "itow: ";
    Printer<double>::stream(s, indent + "  ", v.itow);
    s << indent << "position_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.position_accuracy);
    s << indent << "speed_accuracy: ";
    Printer<double>::stream(s, indent + "  ", v.speed_accuracy);
    s << indent << "satellite_number: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.satellite_number);
    s << indent << "gps_fix: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_fix);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MTIG_DRIVER_MESSAGE_GPSINFO_H
